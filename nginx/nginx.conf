worker_processes 1;

events { 
    worker_connections 1024; 
    }

http {

    sendfile on;

    # Wir müssen den resolver auf das lokale Gateway von Podman / Docker
    # setzen, damit wir die einzelnen Container direkt mit dem Containernamen
    # ansprechen können.
    resolver 127.0.0.11:53 valid=5s; # Docker
    # resolver 10.89.1.1:53 valid=5s;  # Podman

    # Dieser Serverblock wird als default angegeben. Alle Anfragen die auf dem
    # Port 80 ankommen, und keine zuweisbare URL haben, werden mit einem 404
    # Fehler abgewiesen.
    server {
        listen 80 default_server;
        return 404;
    }

    # In diesem Serverblock hören wir auf die URLs die für unser Tool wichtig
    # sind.
    server {
        listen 80;

        # Wir geben Hier die URLs an, auf die wir reagieren und auch
        # weiterleiten. Damit die .local URLs funktionieren, müssen wir diese
        # auf unserer Maschine in /etc/hosts setzen, damit diese richtig
        # aufgelöst werden können.
        server_name exdb.local *.exdb.local;

        # Damit wird alles was auf die angegebenen URLs passt, auf https
        # weitergeleitet.
        location / {
            return 301 https://$host$request_uri;
        }
    }
    

    # Dieser Block nimmt Anfragen entgegen die an den client gehen sollen.
    # Diese werden dann im internen Netzwerk von Docker / Podman über http
    # weitergeleitet.
    # Das zertifikat wird an dieser Stelle aufgelöst und zurück geschickt, dann
    # muss sich der eigentlich client nicht mehr darum kümmern und der Client
    # Container muss nur seine Daten ganz normal über http veröffentlichen.
    server {
        server_name client.exdb.local;
        set $upstream      http://client:8080;
        listen 443 ssl;
        ssl_certificate /etc/ssl/certs/exdb.local.crt;
        ssl_certificate_key /etc/ssl/private/exdb.local.key;

        # TODO: activate this in production, so we can use the service with
        # letsencrypt
        # ssl_certificate /etc/letsencrypt/live/cege.me-0001/fullchain.pem;
        # ssl_certificate_key /etc/letsencrypt/live/cege.me-0001/privkey.pem;
        # include /etc/letsencrypt/options-ssl-nginx.conf;
        # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        location / {
            proxy_pass         $upstream;
            proxy_redirect     off;
            proxy_http_version 1.1;
            proxy_set_header   Host $host;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection "Upgrade";
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
            client_max_body_size 100M;
        }
    }

    # Hier gilt das gleiche wie beim client, und wir können die gleichen
    # Zertifikate verwenden. Der einzige Unterschied ist der upstream. Je nach
    # Server könnte das aber auch noch anders konfiguriert werden.
    server {
        server_name server.exdb.local;
        set $upstream      http://server:8000;
        listen 443 ssl;
        ssl_certificate /etc/ssl/certs/exdb.local.crt;
        ssl_certificate_key /etc/ssl/private/exdb.local.key;

        # Hier ist nicht ganz alles gleich wie beim client, da wir hier keine
        # websockets verwenden.
        location / {
            proxy_pass         $upstream;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
            client_max_body_size 100M;
        }
    }

    server {
        server_name prisma.exdb.local;
        set $upstream      http://server:5555;
        listen 443 ssl;
        ssl_certificate /etc/ssl/certs/exdb.local.crt;
        ssl_certificate_key /etc/ssl/private/exdb.local.key;

        # Hier ist nicht ganz alles gleich wie beim client, da wir hier keine
        # websockets verwenden.
        location / {
            proxy_pass         $upstream;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
            client_max_body_size 100M;
        }
    }



    #external linode server

    # In diesem Serverblock hören wir auf die URLs die für unser Tool wichtig
    # sind.
    server {
        listen 80;

        # Wir geben Hier die URLs an, auf die wir reagieren und auch
        # weiterleiten. Damit die .linode URLs funktionieren, müssen wir diese
        # auf unserer Maschine in /etc/hosts setzen, damit diese richtig
        # aufgelöst werden können.
        server_name letstalkaboutx.ch *.letstalkaboutx.ch;

        # Damit wird alles was auf die angegebenen URLs passt, auf https
        # weitergeleitet.
        location / {
            return 301 https://$host$request_uri;
        }
    }
    

    # Dieser Block nimmt Anfragen entgegen die an den client gehen sollen.
    # Diese werden dann im internen Netzwerk von Docker / Podman über http
    # weitergeleitet.
    # Das zertifikat wird an dieser Stelle aufgelöst und zurück geschickt, dann
    # muss sich der eigentlich client nicht mehr darum kümmern und der Client
    # Container muss nur seine Daten ganz normal über http veröffentlichen.
    server {
        server_name client.letstalkaboutx.ch;
        set $upstream      http://client:8080;
        listen 443 ssl;
        ssl_certificate /etc/ssl/certs/exdb.local.crt;
        ssl_certificate_key /etc/ssl/private/exdb.local.key;

        # TODO: activate this in production, so we can use the service with
        # letsencrypt
        # ssl_certificate /etc/letsencrypt/live/cege.me-0001/fullchain.pem;
        # ssl_certificate_key /etc/letsencrypt/live/cege.me-0001/privkey.pem;
        # include /etc/letsencrypt/options-ssl-nginx.conf;
        # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        location / {
            proxy_pass         $upstream;
            proxy_redirect     off;
            proxy_http_version 1.1;
            proxy_set_header   Host $host;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection "Upgrade";
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
            client_max_body_size 100M;
        }
    }

    # Hier gilt das gleiche wie beim client, und wir können die gleichen
    # Zertifikate verwenden. Der einzige Unterschied ist der upstream. Je nach
    # Server könnte das aber auch noch anders konfiguriert werden.
    server {
        server_name server.letstalkaboutx.ch;
        set $upstream      http://server:8000;
        listen 443 ssl;
        ssl_certificate /etc/ssl/certs/exdb.local.crt;
        ssl_certificate_key /etc/ssl/private/exdb.local.key;

        # Hier ist nicht ganz alles gleich wie beim client, da wir hier keine
        # websockets verwenden.
        location / {
            proxy_pass         $upstream;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
            client_max_body_size 100M;
        }
    }

    server {
        server_name prisma.exdb.linode;
        set $upstream      http://server:5555;
        listen 443 ssl;
        ssl_certificate /etc/ssl/certs/exdb.local.crt;
        ssl_certificate_key /etc/ssl/private/exdb.local.key;

        # Hier ist nicht ganz alles gleich wie beim client, da wir hier keine
        # websockets verwenden.
        location / {
            proxy_pass         $upstream;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
            client_max_body_size 100M;
        }
    }

}
