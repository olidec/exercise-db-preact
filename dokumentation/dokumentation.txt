1. Projektplanung und Design
1.1 Anforderungsanalyse

    Kernfunktionen: Die Applikation ermöglicht es Benutzern, Mathe-Aufgaben zu erstellen, durchsuchen, kommentieren und zu verwalten. Ein Warenkorb-System ermöglicht das Sammeln und Erstellen von Aufgabenblättern.
    User Stories und Use Cases: Diese helfen, die Bedürfnisse und Erwartungen der Endbenutzer zu identifizieren. Sie dienen als Grundlage für das Design und die Entwicklung der Applikation.

1.2 Datenmodellierung

    Entwurf der Datenbank-Schemata: Die Datenstruktur für Aufgaben, Kommentare, Benutzer und Aufgabenkategorien wird definiert. Wichtige Beziehungen zwischen den Entitäten werden festgelegt, wie z.B. die Zuordnung von Aufgaben zu Kategorien und von Aufgaben zu Kommentaren.

1.3 Architekturdesign

    Backend-Architektur: Entscheidung zwischen REST API oder GraphQL basierend auf den Anforderungen und Vorzügen beider Technologien.
    Frontend-Architektur: Planung der Komponentenhierarchie und des Zustandsmanagements, um eine effiziente und wartbare Codebasis zu gewährleisten.

1.4 Technologische Auswahl

    Bestätigung der Technologien: Preact für das Frontend, Express für das Backend und Prisma für die Datenbankinteraktion werden als Haupttechnologien ausgewählt. Die Notwendigkeit weiterer Bibliotheken (z.B. für Authentifizierung) wird überprüft.

2. Backend-Entwicklung
2.1 Einrichten der Entwicklungsumgebung

    Einrichtung von Node.js, Express und Prisma: Konfiguration der grundlegenden Entwicklungsumgebung, um mit der Entwicklung beginnen zu können.

2.2 API-Entwicklung

    CRUD-Operationen: Implementierung der Grundoperationen für die Interaktion mit Aufgaben und Kommentaren.
    Authentifizierung und Autorisierung: Sicherstellung, dass nur autorisierte Benutzer bestimmte Aktionen durchführen können.

2.3 Datenbankintegration

    Prisma für das Datenbankschema: Nutzung von Prisma für das Datenbank-Management, einschließlich Schema-Definition und Migrationen.

3. Frontend-Entwicklung
3.1 Einrichten der Preact-Anwendung

    Projektinitialisierung: Erstellung einer neuen Preact-Anwendung und Einrichtung des Routings.

3.2 UI-Entwicklung

    UI-Komponenten: Entwicklung der Benutzeroberfläche, einschließlich Komponenten für die Aufgabenverwaltung und das Kommentarsystem.

3.3 Integration mit dem Backend

    Datenabfrage und -manipulation: Implementierung der Logik für die Kommunikation mit dem Backend, um Daten zu fetchen, zu erstellen und zu aktualisieren.

4. Testing und Qualitätssicherung

    Backend- und Frontend-Tests: Durchführung von Tests auf beiden Ebenen, um die Funktionalität und Zuverlässigkeit der Anwendung zu gewährleisten.
    Benutzerakzeptanztests: Einbeziehung der Endbenutzer in den Testprozess, um Feedback zu sammeln und die Benutzerfreundlichkeit zu optimieren.

5. Deployment und Inbetriebnahme

    Vorbereitung und Auswahl einer Hosting-Plattform: Konfiguration des Projekts für die Produktionsumgebung und Auswahl einer geeigneten Plattform für das Hosting.
    Durchführung des Deployments: Veröffentlichung der Anwendung und Überprüfung der Funktionalität im Produktionsumfeld.

6. Dokumentation und Übergabe

    Erstellung der Dokumentation: Dokumentation des Codes, der Architektur und der Benutzung der Anwendung.
    Abschlusspräsentation: Präsentation des Entwicklungsprozesses und der fertigen Anwendung.

Dokumentation
1.1.	 Anforderungsanalyse
Die Kernfunktion der Applikation soll das hinzufügen und suchen von Mathe Aufgaben sein. Anhand eines Warenkorbs sollen Aufgaben ausgesucht werden und in Form eines Aufgabenblattes (in Latex Code) zusammengestellt werden. Mit einer Kommentarfunktion sollen die einzelnen Aufgaben bewertet werden können. Aufgaben sollten verändert und aus der Datenbank gelöscht werden können.
User Story: 
Als Mathematiklehrer möchte ich eine Sammlung von Mathematikaufgaben durchsuchen können, damit ich schnell und effizient Aufgabenblätter für meine Klasse zusammenstellen kann.
Use Case:

Titel: Durchsuchen von Mathematikaufgaben
Akteure: Mathematiklehrer
Trigger: Lehrer möchte eine spezifische Aufgabe finden.
Vorbedingungen: Lehrer ist angemeldet und befindet sich auf der Seite der Aufgabensammlung.

Hauptszenario:
1.	Lehrer gibt Suchbegriffe in das Suchfeld ein.
2.	Das System zeigt eine Liste von Aufgaben an, die den Suchkriterien entsprechen.
3.	Lehrer wählt eine Aufgabe aus der Liste aus, um Details anzusehen.
4.	Lehrer entscheidet sich für die Aufgabe und tut sie in den Warenkorb
5.	Lehrer erstellt anhand der Aufgaben im Warenkorb ein Aufgabenblatt 
Nachbedingungen: Lehrer hat Zugriff auf die Details der ausgewählten Aufgabe.

1.2.	Datenmodellierung


generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  name      String?
  password  String?
  role      String     @default("USER")
  exercises Exercise[]
}

model Exercise {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime?  @updatedAt
  summary    String?
  content    String     @unique
  solution   String
  author     User       @relation(fields: [authorId], references: [id])
  authorId   Int        @default(1)
  categories Category[]
}

model Category {
  id          Int           @id @default(autoincrement())
  name        String
  exercises   Exercise[]
  subcategory Subcategory[]
}

model Subcategory {
  id             Int              @id @default(autoincrement())
  name           String
  category       Category         @relation(fields: [categoryId], references: [id])
  categoryId     Int
  subsubcategory Subsubcategory[]
}

model Subsubcategory {
  id            Int         @id @default(autoincrement())
  name          String
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  subcategoryId Int
}



Entitäten
1. Benutzer (Users)
•	BenutzerID (Primary Key)
•	Name
•	Email
•	Passwort
•	Rolle
•	Aufgaben [] 1:n
•	Kommentare[] 1:n

2. Aufgaben (Tasks)
•	AufgabenID (Primary Key)
•	Titel
•	Inhalt (die eigentliche Aufgabenstellung)
•	Zusammenfassung
•	Lösungen
•	Erstellungs Datum
•	Update Datum
•	BenutzerID-> AutorID (Foreign Key von Benutzer) n:1
•	Autor (Benutzer) n:1
•	KategorieID (Foreign Key von Kategorien) n:1
•	Kategorie
•	Unterkategorie
3. Kategorien (Categories)
•	KategorieID (Primary Key)
•	Name
•	Beschreibung
•	Aufgaben [] 1:n
•	Unterkategorien [] 1:n
4. Kommentare (Comments)
•	KommentarID (Primary Key)
•	Inhalt
•	Erstellungsdatum
•	BenutzerID (Foreign Key von Benutzer) n:1
•	AufgabenID (Foreign Key von Aufgaben) n:1
Beziehungen:
•	Benutzer zu Aufgaben: Ein Benutzer kann mehrere Aufgaben erstellen, aber eine Aufgabe bezieht sich nur auf einen Benutzer (1:n-Beziehung).
•	Benutzer zu Kommentaren: Ein Benutzer kann mehrere Kommentare zu verschiedenen Aufgaben hinterlassen und ein Kommentar bezieht sich nur auf einen Benutzer(1:n-Beziehung).
•	Aufgaben zu Kategorien: Eine Aufgabe gehört zu genau einer Kategorie, aber eine Kategorie kann mehrere Aufgaben enthalten (1:n-Beziehung).
•	Aufgaben zu Kommentaren: Eine Aufgabe kann mehrere Kommentare haben, aber jeder Kommentar bezieht sich auf genau eine Aufgabe (1:n-Beziehung).

Benutzer 1----n Aufgaben n----1 Kategorien
1				1
    \                |
     \               |
      \              |
       \             n
        \------n Kommentare


1.3 Architekturdesign

Backend-Architektur:
REST API
REST (Representational State Transfer) ist ein Architekturstil für die Entwicklung von netzwerkbasierten Anwendungen. Eine REST API verwendet HTTP-Requests, um CRUD-Operationen (Create, Read, Update, Delete) auf Ressourcen auszuführen, wobei jede Ressource durch eine URL identifiziert wird. REST APIs sind einfach zu verstehen und zu implementieren, gut dokumentiert und werden von den meisten modernen Webanwendungen unterstützt.
Vorteile:
•	Weit verbreitet und gut verstanden.
•	Funktioniert gut mit standardbasierten CRUD-Operationen.
•	Leicht zu konsumieren, insbesondere für standard Web-Operationen.
Nachteile:
•	Kann zu Over- oder Underfetching führen, da die Größe und Struktur der Antwort oft fest vorgegeben ist.
•	Komplexere Anfragen können mehrere Requests erfordern.

Frontend-Architektur
Die Planung deiner Komponentenhierarchie hilft dabei, die Beziehungen zwischen den Komponenten zu verstehen und wie Daten durch die Anwendung fließen.
•	Atomare Komponenten: Das sind die grundlegendsten UI-Elemente, wie Buttons, Inputs und Labels.
•	Molekulare Komponenten: Komplexere Komponenten, die aus atomaren Komponenten zusammengesetzt sind, wie Formulare oder Navigationsmenüs.
•	Seiten: Komponenten, die ganze Seiten repräsentieren, indem sie molekulare und atomare Komponenten zusammenfügen und mit Daten versorgen.
Zustandsmanagement
Das Zustandsmanagement ist entscheidend für die Verwaltung von Daten und UI-Zuständen (wie Benutzereingaben, geladene Daten, UI-Modi). Preact bietet useState und useEffect Hooks für das lokale Zustandsmanagement in Komponenten. Für komplexere Anwendungen, die einen globalen Zustand benötigen (der über viele Komponenten hinweg geteilt wird), kannst du Bibliotheken wie Zustand oder Context API verwenden.
Zu berücksichtigen:
•	Lokaler vs. globaler Zustand: Entscheide, welche Daten lokal in einer Komponente gehalten werden können und welche im gesamten App-Kontext verfügbar sein müssen.
•	Datenfluss: Plane, wie Daten durch die Anwendung fließen, z.B. wie globale Daten geladen, modifiziert und zwischen Komponenten geteilt werden.

Komponenten

Aufgaben:
-AufgDetails(id) 
- Card (key(für map), id, summary, content)
Suchresultate:
-SearchCard(Card, addToKorb, handleDelete)
-CardListSearch(SearchCard, map)
-SearchKorb (CardListSearch list={cartSearch.value})
Warenkorb:
-WarenCard(Card, handleDelete)
-CardListWaren(WarenCard, map)
-WarenKorb(CardListWaren, list={cartItems.value})

Aufgaben hinzufügen:
-ExForm   const res = await askServer("/api/ex","POST",ex)

Aufgaben finden
-FindExByCategory
-FindExByIdFromServer
-FindExBySearchText

User hinzufügen
-Form const res = await askServer("/api/user", "POST", user);

Navigation
-Menue: 
./   ->User
./add ->AddExercise
./find ->FindExercise
./warenkorb ->WarenKorb
./:id   ->AufgDetails

Seiten
-User  ->Form
-AddExercise ->ExForm
-FindExercise  ->-FindExByCategory, FindExByIdFromServer, FindExBySearchText, SearchKorb
-WarenKorb(CardListWaren, list={cartItems.value})











